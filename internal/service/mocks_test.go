// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"avito_pvz/internal/models/domain"
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductProvider creates a new instance of MockProductProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductProvider {
	mock := &MockProductProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductProvider is an autogenerated mock type for the ProductProvider type
type MockProductProvider struct {
	mock.Mock
}

type MockProductProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductProvider) EXPECT() *MockProductProvider_Expecter {
	return &MockProductProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductProvider
func (_mock *MockProductProvider) Create(ctx context.Context, product *domain.Product) error {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductProvider_Expecter) Create(ctx interface{}, product interface{}) *MockProductProvider_Create_Call {
	return &MockProductProvider_Create_Call{Call: _e.mock.On("Create", ctx, product)}
}

func (_c *MockProductProvider_Create_Call) Run(run func(ctx context.Context, product *domain.Product)) *MockProductProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Product))
	})
	return _c
}

func (_c *MockProductProvider_Create_Call) Return(err error) *MockProductProvider_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductProvider_Create_Call) RunAndReturn(run func(ctx context.Context, product *domain.Product) error) *MockProductProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProductProvider
func (_mock *MockProductProvider) Delete(ctx context.Context, product *domain.Product) error {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProductProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductProvider_Expecter) Delete(ctx interface{}, product interface{}) *MockProductProvider_Delete_Call {
	return &MockProductProvider_Delete_Call{Call: _e.mock.On("Delete", ctx, product)}
}

func (_c *MockProductProvider_Delete_Call) Run(run func(ctx context.Context, product *domain.Product)) *MockProductProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Product))
	})
	return _c
}

func (_c *MockProductProvider_Delete_Call) Return(err error) *MockProductProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductProvider_Delete_Call) RunAndReturn(run func(ctx context.Context, product *domain.Product) error) *MockProductProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetLast provides a mock function for the type MockProductProvider
func (_mock *MockProductProvider) GetLast(ctx context.Context, receptionID uuid.UUID) (*domain.Product, error) {
	ret := _mock.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Product, error)); ok {
		return returnFunc(ctx, receptionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Product); ok {
		r0 = returnFunc(ctx, receptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, receptionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductProvider_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type MockProductProvider_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
//   - ctx
//   - receptionID
func (_e *MockProductProvider_Expecter) GetLast(ctx interface{}, receptionID interface{}) *MockProductProvider_GetLast_Call {
	return &MockProductProvider_GetLast_Call{Call: _e.mock.On("GetLast", ctx, receptionID)}
}

func (_c *MockProductProvider_GetLast_Call) Run(run func(ctx context.Context, receptionID uuid.UUID)) *MockProductProvider_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductProvider_GetLast_Call) Return(product *domain.Product, err error) *MockProductProvider_GetLast_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductProvider_GetLast_Call) RunAndReturn(run func(ctx context.Context, receptionID uuid.UUID) (*domain.Product, error)) *MockProductProvider_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceptionGetter creates a new instance of MockReceptionGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceptionGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceptionGetter {
	mock := &MockReceptionGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceptionGetter is an autogenerated mock type for the ReceptionGetter type
type MockReceptionGetter struct {
	mock.Mock
}

type MockReceptionGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceptionGetter) EXPECT() *MockReceptionGetter_Expecter {
	return &MockReceptionGetter_Expecter{mock: &_m.Mock}
}

// GetLast provides a mock function for the type MockReceptionGetter
func (_mock *MockReceptionGetter) GetLast(ctx context.Context, pvz uuid.UUID) (*domain.Reception, error) {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Reception, error)); ok {
		return returnFunc(ctx, pvz)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Reception); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionGetter_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type MockReceptionGetter_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockReceptionGetter_Expecter) GetLast(ctx interface{}, pvz interface{}) *MockReceptionGetter_GetLast_Call {
	return &MockReceptionGetter_GetLast_Call{Call: _e.mock.On("GetLast", ctx, pvz)}
}

func (_c *MockReceptionGetter_GetLast_Call) Run(run func(ctx context.Context, pvz uuid.UUID)) *MockReceptionGetter_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockReceptionGetter_GetLast_Call) Return(reception *domain.Reception, err error) *MockReceptionGetter_GetLast_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionGetter_GetLast_Call) RunAndReturn(run func(ctx context.Context, pvz uuid.UUID) (*domain.Reception, error)) *MockReceptionGetter_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPVZChecker creates a new instance of MockPVZChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZChecker {
	mock := &MockPVZChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZChecker is an autogenerated mock type for the PVZChecker type
type MockPVZChecker struct {
	mock.Mock
}

type MockPVZChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZChecker) EXPECT() *MockPVZChecker_Expecter {
	return &MockPVZChecker_Expecter{mock: &_m.Mock}
}

// Exist provides a mock function for the type MockPVZChecker
func (_mock *MockPVZChecker) Exist(ctx context.Context, pvz uuid.UUID) error {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPVZChecker_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type MockPVZChecker_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockPVZChecker_Expecter) Exist(ctx interface{}, pvz interface{}) *MockPVZChecker_Exist_Call {
	return &MockPVZChecker_Exist_Call{Call: _e.mock.On("Exist", ctx, pvz)}
}

func (_c *MockPVZChecker_Exist_Call) Run(run func(ctx context.Context, pvz uuid.UUID)) *MockPVZChecker_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPVZChecker_Exist_Call) Return(err error) *MockPVZChecker_Exist_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPVZChecker_Exist_Call) RunAndReturn(run func(ctx context.Context, pvz uuid.UUID) error) *MockPVZChecker_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPVZProvider creates a new instance of MockPVZProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZProvider {
	mock := &MockPVZProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZProvider is an autogenerated mock type for the PVZProvider type
type MockPVZProvider struct {
	mock.Mock
}

type MockPVZProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZProvider) EXPECT() *MockPVZProvider_Expecter {
	return &MockPVZProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPVZProvider
func (_mock *MockPVZProvider) Create(ctx context.Context, pvz *domain.PVZ) error {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PVZ) error); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPVZProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPVZProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockPVZProvider_Expecter) Create(ctx interface{}, pvz interface{}) *MockPVZProvider_Create_Call {
	return &MockPVZProvider_Create_Call{Call: _e.mock.On("Create", ctx, pvz)}
}

func (_c *MockPVZProvider_Create_Call) Run(run func(ctx context.Context, pvz *domain.PVZ)) *MockPVZProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PVZ))
	})
	return _c
}

func (_c *MockPVZProvider_Create_Call) Return(err error) *MockPVZProvider_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPVZProvider_Create_Call) RunAndReturn(run func(ctx context.Context, pvz *domain.PVZ) error) *MockPVZProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockPVZProvider
func (_mock *MockPVZProvider) GetAll(ctx context.Context) ([]domain.PVZ, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.PVZ, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.PVZ); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZProvider_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockPVZProvider_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
func (_e *MockPVZProvider_Expecter) GetAll(ctx interface{}) *MockPVZProvider_GetAll_Call {
	return &MockPVZProvider_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockPVZProvider_GetAll_Call) Run(run func(ctx context.Context)) *MockPVZProvider_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPVZProvider_GetAll_Call) Return(pVZs []domain.PVZ, err error) *MockPVZProvider_GetAll_Call {
	_c.Call.Return(pVZs, err)
	return _c
}

func (_c *MockPVZProvider_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.PVZ, error)) *MockPVZProvider_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithParam provides a mock function for the type MockPVZProvider
func (_mock *MockPVZProvider) GetWithParam(ctx context.Context, params domain.Params) ([]domain.PVZAgregate, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetWithParam")
	}

	var r0 []domain.PVZAgregate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Params) ([]domain.PVZAgregate, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Params) []domain.PVZAgregate); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZAgregate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Params) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZProvider_GetWithParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithParam'
type MockPVZProvider_GetWithParam_Call struct {
	*mock.Call
}

// GetWithParam is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockPVZProvider_Expecter) GetWithParam(ctx interface{}, params interface{}) *MockPVZProvider_GetWithParam_Call {
	return &MockPVZProvider_GetWithParam_Call{Call: _e.mock.On("GetWithParam", ctx, params)}
}

func (_c *MockPVZProvider_GetWithParam_Call) Run(run func(ctx context.Context, params domain.Params)) *MockPVZProvider_GetWithParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Params))
	})
	return _c
}

func (_c *MockPVZProvider_GetWithParam_Call) Return(pVZAgregates []domain.PVZAgregate, err error) *MockPVZProvider_GetWithParam_Call {
	_c.Call.Return(pVZAgregates, err)
	return _c
}

func (_c *MockPVZProvider_GetWithParam_Call) RunAndReturn(run func(ctx context.Context, params domain.Params) ([]domain.PVZAgregate, error)) *MockPVZProvider_GetWithParam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceptionProvider creates a new instance of MockReceptionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceptionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceptionProvider {
	mock := &MockReceptionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceptionProvider is an autogenerated mock type for the ReceptionProvider type
type MockReceptionProvider struct {
	mock.Mock
}

type MockReceptionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceptionProvider) EXPECT() *MockReceptionProvider_Expecter {
	return &MockReceptionProvider_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockReceptionProvider
func (_mock *MockReceptionProvider) Close(ctx context.Context, reception domain.Reception) error {
	ret := _mock.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Reception) error); ok {
		r0 = returnFunc(ctx, reception)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReceptionProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx
//   - reception
func (_e *MockReceptionProvider_Expecter) Close(ctx interface{}, reception interface{}) *MockReceptionProvider_Close_Call {
	return &MockReceptionProvider_Close_Call{Call: _e.mock.On("Close", ctx, reception)}
}

func (_c *MockReceptionProvider_Close_Call) Run(run func(ctx context.Context, reception domain.Reception)) *MockReceptionProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Reception))
	})
	return _c
}

func (_c *MockReceptionProvider_Close_Call) Return(err error) *MockReceptionProvider_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionProvider_Close_Call) RunAndReturn(run func(ctx context.Context, reception domain.Reception) error) *MockReceptionProvider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockReceptionProvider
func (_mock *MockReceptionProvider) Create(ctx context.Context, reception domain.Reception) error {
	ret := _mock.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Reception) error); ok {
		r0 = returnFunc(ctx, reception)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReceptionProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - reception
func (_e *MockReceptionProvider_Expecter) Create(ctx interface{}, reception interface{}) *MockReceptionProvider_Create_Call {
	return &MockReceptionProvider_Create_Call{Call: _e.mock.On("Create", ctx, reception)}
}

func (_c *MockReceptionProvider_Create_Call) Run(run func(ctx context.Context, reception domain.Reception)) *MockReceptionProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Reception))
	})
	return _c
}

func (_c *MockReceptionProvider_Create_Call) Return(err error) *MockReceptionProvider_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionProvider_Create_Call) RunAndReturn(run func(ctx context.Context, reception domain.Reception) error) *MockReceptionProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetLast provides a mock function for the type MockReceptionProvider
func (_mock *MockReceptionProvider) GetLast(ctx context.Context, pvz uuid.UUID) (*domain.Reception, error) {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Reception, error)); ok {
		return returnFunc(ctx, pvz)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Reception); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionProvider_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type MockReceptionProvider_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockReceptionProvider_Expecter) GetLast(ctx interface{}, pvz interface{}) *MockReceptionProvider_GetLast_Call {
	return &MockReceptionProvider_GetLast_Call{Call: _e.mock.On("GetLast", ctx, pvz)}
}

func (_c *MockReceptionProvider_GetLast_Call) Run(run func(ctx context.Context, pvz uuid.UUID)) *MockReceptionProvider_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockReceptionProvider_GetLast_Call) Return(reception *domain.Reception, err error) *MockReceptionProvider_GetLast_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionProvider_GetLast_Call) RunAndReturn(run func(ctx context.Context, pvz uuid.UUID) (*domain.Reception, error)) *MockReceptionProvider_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTGenerator creates a new instance of MockJWTGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTGenerator {
	mock := &MockJWTGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTGenerator is an autogenerated mock type for the JWTGenerator type
type MockJWTGenerator struct {
	mock.Mock
}

type MockJWTGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTGenerator) EXPECT() *MockJWTGenerator_Expecter {
	return &MockJWTGenerator_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type MockJWTGenerator
func (_mock *MockJWTGenerator) GenerateToken(email string, role string) (string, error) {
	ret := _mock.Called(email, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(email, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(email, role)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(email, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTGenerator_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJWTGenerator_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - email
//   - role
func (_e *MockJWTGenerator_Expecter) GenerateToken(email interface{}, role interface{}) *MockJWTGenerator_GenerateToken_Call {
	return &MockJWTGenerator_GenerateToken_Call{Call: _e.mock.On("GenerateToken", email, role)}
}

func (_c *MockJWTGenerator_GenerateToken_Call) Run(run func(email string, role string)) *MockJWTGenerator_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockJWTGenerator_GenerateToken_Call) Return(s string, err error) *MockJWTGenerator_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJWTGenerator_GenerateToken_Call) RunAndReturn(run func(email string, role string) (string, error)) *MockJWTGenerator_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserProvider creates a new instance of MockUserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserProvider {
	mock := &MockUserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserProvider is an autogenerated mock type for the UserProvider type
type MockUserProvider struct {
	mock.Mock
}

type MockUserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserProvider) EXPECT() *MockUserProvider_Expecter {
	return &MockUserProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserProvider
func (_mock *MockUserProvider) Create(ctx context.Context, user *domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserProvider_Expecter) Create(ctx interface{}, user interface{}) *MockUserProvider_Create_Call {
	return &MockUserProvider_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserProvider_Create_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserProvider_Create_Call) Return(err error) *MockUserProvider_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserProvider_Create_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) error) *MockUserProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserProvider
func (_mock *MockUserProvider) GetByEmail(ctx context.Context, email string) (*domain.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserProvider_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserProvider_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserProvider_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserProvider_GetByEmail_Call {
	return &MockUserProvider_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserProvider_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserProvider_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserProvider_GetByEmail_Call) Return(user *domain.User, err error) *MockUserProvider_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserProvider_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*domain.User, error)) *MockUserProvider_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}
