// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pvzgrpc

import (
	"avito_pvz/internal/models/domain"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPVZ creates a new instance of MockPVZ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZ(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZ {
	mock := &MockPVZ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZ is an autogenerated mock type for the PVZ type
type MockPVZ struct {
	mock.Mock
}

type MockPVZ_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZ) EXPECT() *MockPVZ_Expecter {
	return &MockPVZ_Expecter{mock: &_m.Mock}
}

// GetAllPVZ provides a mock function for the type MockPVZ
func (_mock *MockPVZ) GetAllPVZ(ctx context.Context) (domain.PVZList, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPVZ")
	}

	var r0 domain.PVZList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (domain.PVZList, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.PVZList); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PVZList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZ_GetAllPVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPVZ'
type MockPVZ_GetAllPVZ_Call struct {
	*mock.Call
}

// GetAllPVZ is a helper method to define mock.On call
//   - ctx
func (_e *MockPVZ_Expecter) GetAllPVZ(ctx interface{}) *MockPVZ_GetAllPVZ_Call {
	return &MockPVZ_GetAllPVZ_Call{Call: _e.mock.On("GetAllPVZ", ctx)}
}

func (_c *MockPVZ_GetAllPVZ_Call) Run(run func(ctx context.Context)) *MockPVZ_GetAllPVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPVZ_GetAllPVZ_Call) Return(pVZList domain.PVZList, err error) *MockPVZ_GetAllPVZ_Call {
	_c.Call.Return(pVZList, err)
	return _c
}

func (_c *MockPVZ_GetAllPVZ_Call) RunAndReturn(run func(ctx context.Context) (domain.PVZList, error)) *MockPVZ_GetAllPVZ_Call {
	_c.Call.Return(run)
	return _c
}
