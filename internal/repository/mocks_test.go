// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"avito_pvz/internal/models/domain"
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(ctx context.Context, product *domain.Product) error {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductRepository_Expecter) Create(ctx interface{}, product interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", ctx, product)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(ctx context.Context, product *domain.Product)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Product))
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(err error) *MockProductRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(ctx context.Context, product *domain.Product) error) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Delete(ctx context.Context, product *domain.Product) error {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProductRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductRepository_Expecter) Delete(ctx interface{}, product interface{}) *MockProductRepository_Delete_Call {
	return &MockProductRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, product)}
}

func (_c *MockProductRepository_Delete_Call) Run(run func(ctx context.Context, product *domain.Product)) *MockProductRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Product))
	})
	return _c
}

func (_c *MockProductRepository_Delete_Call) Return(err error) *MockProductRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, product *domain.Product) error) *MockProductRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetLast provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) GetLast(ctx context.Context, receptionID uuid.UUID) (*domain.Product, error) {
	ret := _mock.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Product, error)); ok {
		return returnFunc(ctx, receptionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Product); ok {
		r0 = returnFunc(ctx, receptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, receptionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type MockProductRepository_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
//   - ctx
//   - receptionID
func (_e *MockProductRepository_Expecter) GetLast(ctx interface{}, receptionID interface{}) *MockProductRepository_GetLast_Call {
	return &MockProductRepository_GetLast_Call{Call: _e.mock.On("GetLast", ctx, receptionID)}
}

func (_c *MockProductRepository_GetLast_Call) Run(run func(ctx context.Context, receptionID uuid.UUID)) *MockProductRepository_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductRepository_GetLast_Call) Return(product *domain.Product, err error) *MockProductRepository_GetLast_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductRepository_GetLast_Call) RunAndReturn(run func(ctx context.Context, receptionID uuid.UUID) (*domain.Product, error)) *MockProductRepository_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPVZRepository creates a new instance of MockPVZRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZRepository {
	mock := &MockPVZRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZRepository is an autogenerated mock type for the PVZRepository type
type MockPVZRepository struct {
	mock.Mock
}

type MockPVZRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZRepository) EXPECT() *MockPVZRepository_Expecter {
	return &MockPVZRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPVZRepository
func (_mock *MockPVZRepository) Create(ctx context.Context, pvz *domain.PVZ) error {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PVZ) error); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPVZRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPVZRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockPVZRepository_Expecter) Create(ctx interface{}, pvz interface{}) *MockPVZRepository_Create_Call {
	return &MockPVZRepository_Create_Call{Call: _e.mock.On("Create", ctx, pvz)}
}

func (_c *MockPVZRepository_Create_Call) Run(run func(ctx context.Context, pvz *domain.PVZ)) *MockPVZRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PVZ))
	})
	return _c
}

func (_c *MockPVZRepository_Create_Call) Return(err error) *MockPVZRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPVZRepository_Create_Call) RunAndReturn(run func(ctx context.Context, pvz *domain.PVZ) error) *MockPVZRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function for the type MockPVZRepository
func (_mock *MockPVZRepository) Exist(ctx context.Context, pvz uuid.UUID) error {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPVZRepository_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type MockPVZRepository_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockPVZRepository_Expecter) Exist(ctx interface{}, pvz interface{}) *MockPVZRepository_Exist_Call {
	return &MockPVZRepository_Exist_Call{Call: _e.mock.On("Exist", ctx, pvz)}
}

func (_c *MockPVZRepository_Exist_Call) Run(run func(ctx context.Context, pvz uuid.UUID)) *MockPVZRepository_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPVZRepository_Exist_Call) Return(err error) *MockPVZRepository_Exist_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPVZRepository_Exist_Call) RunAndReturn(run func(ctx context.Context, pvz uuid.UUID) error) *MockPVZRepository_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockPVZRepository
func (_mock *MockPVZRepository) GetAll(ctx context.Context) ([]domain.PVZ, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.PVZ, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.PVZ); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockPVZRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
func (_e *MockPVZRepository_Expecter) GetAll(ctx interface{}) *MockPVZRepository_GetAll_Call {
	return &MockPVZRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockPVZRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockPVZRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPVZRepository_GetAll_Call) Return(pVZs []domain.PVZ, err error) *MockPVZRepository_GetAll_Call {
	_c.Call.Return(pVZs, err)
	return _c
}

func (_c *MockPVZRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.PVZ, error)) *MockPVZRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithParam provides a mock function for the type MockPVZRepository
func (_mock *MockPVZRepository) GetWithParam(ctx context.Context, params domain.Params) ([]domain.PVZAgregate, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetWithParam")
	}

	var r0 []domain.PVZAgregate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Params) ([]domain.PVZAgregate, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Params) []domain.PVZAgregate); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZAgregate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Params) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZRepository_GetWithParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithParam'
type MockPVZRepository_GetWithParam_Call struct {
	*mock.Call
}

// GetWithParam is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockPVZRepository_Expecter) GetWithParam(ctx interface{}, params interface{}) *MockPVZRepository_GetWithParam_Call {
	return &MockPVZRepository_GetWithParam_Call{Call: _e.mock.On("GetWithParam", ctx, params)}
}

func (_c *MockPVZRepository_GetWithParam_Call) Run(run func(ctx context.Context, params domain.Params)) *MockPVZRepository_GetWithParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Params))
	})
	return _c
}

func (_c *MockPVZRepository_GetWithParam_Call) Return(pVZAgregates []domain.PVZAgregate, err error) *MockPVZRepository_GetWithParam_Call {
	_c.Call.Return(pVZAgregates, err)
	return _c
}

func (_c *MockPVZRepository_GetWithParam_Call) RunAndReturn(run func(ctx context.Context, params domain.Params) ([]domain.PVZAgregate, error)) *MockPVZRepository_GetWithParam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceptionRepository creates a new instance of MockReceptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceptionRepository {
	mock := &MockReceptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceptionRepository is an autogenerated mock type for the ReceptionRepository type
type MockReceptionRepository struct {
	mock.Mock
}

type MockReceptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceptionRepository) EXPECT() *MockReceptionRepository_Expecter {
	return &MockReceptionRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockReceptionRepository
func (_mock *MockReceptionRepository) Close(ctx context.Context, reception domain.Reception) error {
	ret := _mock.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Reception) error); ok {
		r0 = returnFunc(ctx, reception)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReceptionRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx
//   - reception
func (_e *MockReceptionRepository_Expecter) Close(ctx interface{}, reception interface{}) *MockReceptionRepository_Close_Call {
	return &MockReceptionRepository_Close_Call{Call: _e.mock.On("Close", ctx, reception)}
}

func (_c *MockReceptionRepository_Close_Call) Run(run func(ctx context.Context, reception domain.Reception)) *MockReceptionRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Reception))
	})
	return _c
}

func (_c *MockReceptionRepository_Close_Call) Return(err error) *MockReceptionRepository_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionRepository_Close_Call) RunAndReturn(run func(ctx context.Context, reception domain.Reception) error) *MockReceptionRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockReceptionRepository
func (_mock *MockReceptionRepository) Create(ctx context.Context, reception domain.Reception) error {
	ret := _mock.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Reception) error); ok {
		r0 = returnFunc(ctx, reception)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReceptionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - reception
func (_e *MockReceptionRepository_Expecter) Create(ctx interface{}, reception interface{}) *MockReceptionRepository_Create_Call {
	return &MockReceptionRepository_Create_Call{Call: _e.mock.On("Create", ctx, reception)}
}

func (_c *MockReceptionRepository_Create_Call) Run(run func(ctx context.Context, reception domain.Reception)) *MockReceptionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Reception))
	})
	return _c
}

func (_c *MockReceptionRepository_Create_Call) Return(err error) *MockReceptionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionRepository_Create_Call) RunAndReturn(run func(ctx context.Context, reception domain.Reception) error) *MockReceptionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetLast provides a mock function for the type MockReceptionRepository
func (_mock *MockReceptionRepository) GetLast(ctx context.Context, pvz uuid.UUID) (*domain.Reception, error) {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for GetLast")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Reception, error)); ok {
		return returnFunc(ctx, pvz)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Reception); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionRepository_GetLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLast'
type MockReceptionRepository_GetLast_Call struct {
	*mock.Call
}

// GetLast is a helper method to define mock.On call
//   - ctx
//   - pvz
func (_e *MockReceptionRepository_Expecter) GetLast(ctx interface{}, pvz interface{}) *MockReceptionRepository_GetLast_Call {
	return &MockReceptionRepository_GetLast_Call{Call: _e.mock.On("GetLast", ctx, pvz)}
}

func (_c *MockReceptionRepository_GetLast_Call) Run(run func(ctx context.Context, pvz uuid.UUID)) *MockReceptionRepository_GetLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockReceptionRepository_GetLast_Call) Return(reception *domain.Reception, err error) *MockReceptionRepository_GetLast_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionRepository_GetLast_Call) RunAndReturn(run func(ctx context.Context, pvz uuid.UUID) (*domain.Reception, error)) *MockReceptionRepository_GetLast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, user *domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, user interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(err error) *MockUserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) error) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByEmail(ctx context.Context, email string) (*domain.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepository_GetByEmail_Call {
	return &MockUserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) Return(user *domain.User, err error) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*domain.User, error)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}
