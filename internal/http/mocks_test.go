// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package httpserver

import (
	"avito_pvz/internal/models/domain"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJWTGenerator creates a new instance of MockJWTGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTGenerator {
	mock := &MockJWTGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTGenerator is an autogenerated mock type for the JWTGenerator type
type MockJWTGenerator struct {
	mock.Mock
}

type MockJWTGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTGenerator) EXPECT() *MockJWTGenerator_Expecter {
	return &MockJWTGenerator_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type MockJWTGenerator
func (_mock *MockJWTGenerator) GenerateToken(email string, role string) (string, error) {
	ret := _mock.Called(email, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(email, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(email, role)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(email, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTGenerator_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJWTGenerator_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - email
//   - role
func (_e *MockJWTGenerator_Expecter) GenerateToken(email interface{}, role interface{}) *MockJWTGenerator_GenerateToken_Call {
	return &MockJWTGenerator_GenerateToken_Call{Call: _e.mock.On("GenerateToken", email, role)}
}

func (_c *MockJWTGenerator_GenerateToken_Call) Run(run func(email string, role string)) *MockJWTGenerator_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockJWTGenerator_GenerateToken_Call) Return(s string, err error) *MockJWTGenerator_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJWTGenerator_GenerateToken_Call) RunAndReturn(run func(email string, role string) (string, error)) *MockJWTGenerator_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserProvider creates a new instance of MockUserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserProvider {
	mock := &MockUserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserProvider is an autogenerated mock type for the UserProvider type
type MockUserProvider struct {
	mock.Mock
}

type MockUserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserProvider) EXPECT() *MockUserProvider_Expecter {
	return &MockUserProvider_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function for the type MockUserProvider
func (_mock *MockUserProvider) Auth(ctx context.Context, email string, password string) (*string, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*string, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *string); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserProvider_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockUserProvider_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *MockUserProvider_Expecter) Auth(ctx interface{}, email interface{}, password interface{}) *MockUserProvider_Auth_Call {
	return &MockUserProvider_Auth_Call{Call: _e.mock.On("Auth", ctx, email, password)}
}

func (_c *MockUserProvider_Auth_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserProvider_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserProvider_Auth_Call) Return(s *string, err error) *MockUserProvider_Auth_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserProvider_Auth_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (*string, error)) *MockUserProvider_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockUserProvider
func (_mock *MockUserProvider) Create(ctx context.Context, email domain.Email, password string, role domain.Role) (*domain.User, error) {
	ret := _mock.Called(ctx, email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Email, string, domain.Role) (*domain.User, error)); ok {
		return returnFunc(ctx, email, password, role)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Email, string, domain.Role) *domain.User); ok {
		r0 = returnFunc(ctx, email, password, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Email, string, domain.Role) error); ok {
		r1 = returnFunc(ctx, email, password, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
//   - role
func (_e *MockUserProvider_Expecter) Create(ctx interface{}, email interface{}, password interface{}, role interface{}) *MockUserProvider_Create_Call {
	return &MockUserProvider_Create_Call{Call: _e.mock.On("Create", ctx, email, password, role)}
}

func (_c *MockUserProvider_Create_Call) Run(run func(ctx context.Context, email domain.Email, password string, role domain.Role)) *MockUserProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Email), args[2].(string), args[3].(domain.Role))
	})
	return _c
}

func (_c *MockUserProvider_Create_Call) Return(user *domain.User, err error) *MockUserProvider_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserProvider_Create_Call) RunAndReturn(run func(ctx context.Context, email domain.Email, password string, role domain.Role) (*domain.User, error)) *MockUserProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPVZProvider creates a new instance of MockPVZProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZProvider {
	mock := &MockPVZProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZProvider is an autogenerated mock type for the PVZProvider type
type MockPVZProvider struct {
	mock.Mock
}

type MockPVZProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZProvider) EXPECT() *MockPVZProvider_Expecter {
	return &MockPVZProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPVZProvider
func (_mock *MockPVZProvider) Create(ctx context.Context, city domain.PvzCity) (*domain.PVZ, error) {
	ret := _mock.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PvzCity) (*domain.PVZ, error)); ok {
		return returnFunc(ctx, city)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PvzCity) *domain.PVZ); ok {
		r0 = returnFunc(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PVZ)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PvzCity) error); ok {
		r1 = returnFunc(ctx, city)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPVZProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - city
func (_e *MockPVZProvider_Expecter) Create(ctx interface{}, city interface{}) *MockPVZProvider_Create_Call {
	return &MockPVZProvider_Create_Call{Call: _e.mock.On("Create", ctx, city)}
}

func (_c *MockPVZProvider_Create_Call) Run(run func(ctx context.Context, city domain.PvzCity)) *MockPVZProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PvzCity))
	})
	return _c
}

func (_c *MockPVZProvider_Create_Call) Return(pVZ *domain.PVZ, err error) *MockPVZProvider_Create_Call {
	_c.Call.Return(pVZ, err)
	return _c
}

func (_c *MockPVZProvider_Create_Call) RunAndReturn(run func(ctx context.Context, city domain.PvzCity) (*domain.PVZ, error)) *MockPVZProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockPVZProvider
func (_mock *MockPVZProvider) List(ctx context.Context, params domain.Params) (*domain.PVZAgregate, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PVZAgregate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Params) (*domain.PVZAgregate, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Params) *domain.PVZAgregate); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PVZAgregate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Params) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPVZProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockPVZProvider_Expecter) List(ctx interface{}, params interface{}) *MockPVZProvider_List_Call {
	return &MockPVZProvider_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockPVZProvider_List_Call) Run(run func(ctx context.Context, params domain.Params)) *MockPVZProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Params))
	})
	return _c
}

func (_c *MockPVZProvider_List_Call) Return(pVZAgregate *domain.PVZAgregate, err error) *MockPVZProvider_List_Call {
	_c.Call.Return(pVZAgregate, err)
	return _c
}

func (_c *MockPVZProvider_List_Call) RunAndReturn(run func(ctx context.Context, params domain.Params) (*domain.PVZAgregate, error)) *MockPVZProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceptionProvider creates a new instance of MockReceptionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceptionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceptionProvider {
	mock := &MockReceptionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceptionProvider is an autogenerated mock type for the ReceptionProvider type
type MockReceptionProvider struct {
	mock.Mock
}

type MockReceptionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceptionProvider) EXPECT() *MockReceptionProvider_Expecter {
	return &MockReceptionProvider_Expecter{mock: &_m.Mock}
}

// CloseLastReception provides a mock function for the type MockReceptionProvider
func (_mock *MockReceptionProvider) CloseLastReception(ctx context.Context, pvzID domain.PVZID) (*domain.Reception, error) {
	ret := _mock.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseLastReception")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PVZID) (*domain.Reception, error)); ok {
		return returnFunc(ctx, pvzID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PVZID) *domain.Reception); ok {
		r0 = returnFunc(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PVZID) error); ok {
		r1 = returnFunc(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionProvider_CloseLastReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseLastReception'
type MockReceptionProvider_CloseLastReception_Call struct {
	*mock.Call
}

// CloseLastReception is a helper method to define mock.On call
//   - ctx
//   - pvzID
func (_e *MockReceptionProvider_Expecter) CloseLastReception(ctx interface{}, pvzID interface{}) *MockReceptionProvider_CloseLastReception_Call {
	return &MockReceptionProvider_CloseLastReception_Call{Call: _e.mock.On("CloseLastReception", ctx, pvzID)}
}

func (_c *MockReceptionProvider_CloseLastReception_Call) Run(run func(ctx context.Context, pvzID domain.PVZID)) *MockReceptionProvider_CloseLastReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PVZID))
	})
	return _c
}

func (_c *MockReceptionProvider_CloseLastReception_Call) Return(reception *domain.Reception, err error) *MockReceptionProvider_CloseLastReception_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionProvider_CloseLastReception_Call) RunAndReturn(run func(ctx context.Context, pvzID domain.PVZID) (*domain.Reception, error)) *MockReceptionProvider_CloseLastReception_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockReceptionProvider
func (_mock *MockReceptionProvider) Create(ctx context.Context, pvzID domain.PVZID) (*domain.Reception, error) {
	ret := _mock.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PVZID) (*domain.Reception, error)); ok {
		return returnFunc(ctx, pvzID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PVZID) *domain.Reception); ok {
		r0 = returnFunc(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.PVZID) error); ok {
		r1 = returnFunc(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReceptionProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - pvzID
func (_e *MockReceptionProvider_Expecter) Create(ctx interface{}, pvzID interface{}) *MockReceptionProvider_Create_Call {
	return &MockReceptionProvider_Create_Call{Call: _e.mock.On("Create", ctx, pvzID)}
}

func (_c *MockReceptionProvider_Create_Call) Run(run func(ctx context.Context, pvzID domain.PVZID)) *MockReceptionProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PVZID))
	})
	return _c
}

func (_c *MockReceptionProvider_Create_Call) Return(reception *domain.Reception, err error) *MockReceptionProvider_Create_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionProvider_Create_Call) RunAndReturn(run func(ctx context.Context, pvzID domain.PVZID) (*domain.Reception, error)) *MockReceptionProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductProvider creates a new instance of MockProductProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductProvider {
	mock := &MockProductProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductProvider is an autogenerated mock type for the ProductProvider type
type MockProductProvider struct {
	mock.Mock
}

type MockProductProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductProvider) EXPECT() *MockProductProvider_Expecter {
	return &MockProductProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductProvider
func (_mock *MockProductProvider) Create(ctx context.Context, protduct domain.ProductToAdd) (*domain.Product, error) {
	ret := _mock.Called(ctx, protduct)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProductToAdd) (*domain.Product, error)); ok {
		return returnFunc(ctx, protduct)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProductToAdd) *domain.Product); ok {
		r0 = returnFunc(ctx, protduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProductToAdd) error); ok {
		r1 = returnFunc(ctx, protduct)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - protduct
func (_e *MockProductProvider_Expecter) Create(ctx interface{}, protduct interface{}) *MockProductProvider_Create_Call {
	return &MockProductProvider_Create_Call{Call: _e.mock.On("Create", ctx, protduct)}
}

func (_c *MockProductProvider_Create_Call) Run(run func(ctx context.Context, protduct domain.ProductToAdd)) *MockProductProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProductToAdd))
	})
	return _c
}

func (_c *MockProductProvider_Create_Call) Return(product *domain.Product, err error) *MockProductProvider_Create_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductProvider_Create_Call) RunAndReturn(run func(ctx context.Context, protduct domain.ProductToAdd) (*domain.Product, error)) *MockProductProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLast provides a mock function for the type MockProductProvider
func (_mock *MockProductProvider) DeleteLast(ctx context.Context, pvzID domain.PVZID) error {
	ret := _mock.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLast")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.PVZID) error); ok {
		r0 = returnFunc(ctx, pvzID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductProvider_DeleteLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLast'
type MockProductProvider_DeleteLast_Call struct {
	*mock.Call
}

// DeleteLast is a helper method to define mock.On call
//   - ctx
//   - pvzID
func (_e *MockProductProvider_Expecter) DeleteLast(ctx interface{}, pvzID interface{}) *MockProductProvider_DeleteLast_Call {
	return &MockProductProvider_DeleteLast_Call{Call: _e.mock.On("DeleteLast", ctx, pvzID)}
}

func (_c *MockProductProvider_DeleteLast_Call) Run(run func(ctx context.Context, pvzID domain.PVZID)) *MockProductProvider_DeleteLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PVZID))
	})
	return _c
}

func (_c *MockProductProvider_DeleteLast_Call) Return(err error) *MockProductProvider_DeleteLast_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductProvider_DeleteLast_Call) RunAndReturn(run func(ctx context.Context, pvzID domain.PVZID) error) *MockProductProvider_DeleteLast_Call {
	_c.Call.Return(run)
	return _c
}
