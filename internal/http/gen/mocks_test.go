// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gen

import (
	"context"
	"net/http"

	"github.com/oapi-codegen/runtime/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// GetPvz provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetPvz(w http.ResponseWriter, r *http.Request, params GetPvzParams) {
	_mock.Called(w, r, params)
	return
}

// MockServerInterface_GetPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPvz'
type MockServerInterface_GetPvz_Call struct {
	*mock.Call
}

// GetPvz is a helper method to define mock.On call
//   - w
//   - r
//   - params
func (_e *MockServerInterface_Expecter) GetPvz(w interface{}, r interface{}, params interface{}) *MockServerInterface_GetPvz_Call {
	return &MockServerInterface_GetPvz_Call{Call: _e.mock.On("GetPvz", w, r, params)}
}

func (_c *MockServerInterface_GetPvz_Call) Run(run func(w http.ResponseWriter, r *http.Request, params GetPvzParams)) *MockServerInterface_GetPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(GetPvzParams))
	})
	return _c
}

func (_c *MockServerInterface_GetPvz_Call) Return() *MockServerInterface_GetPvz_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetPvz_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, params GetPvzParams)) *MockServerInterface_GetPvz_Call {
	_c.Run(run)
	return _c
}

// PostDummyLogin provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostDummyLogin(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PostDummyLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDummyLogin'
type MockServerInterface_PostDummyLogin_Call struct {
	*mock.Call
}

// PostDummyLogin is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServerInterface_Expecter) PostDummyLogin(w interface{}, r interface{}) *MockServerInterface_PostDummyLogin_Call {
	return &MockServerInterface_PostDummyLogin_Call{Call: _e.mock.On("PostDummyLogin", w, r)}
}

func (_c *MockServerInterface_PostDummyLogin_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostDummyLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServerInterface_PostDummyLogin_Call) Return() *MockServerInterface_PostDummyLogin_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostDummyLogin_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostDummyLogin_Call {
	_c.Run(run)
	return _c
}

// PostLogin provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostLogin(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PostLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLogin'
type MockServerInterface_PostLogin_Call struct {
	*mock.Call
}

// PostLogin is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServerInterface_Expecter) PostLogin(w interface{}, r interface{}) *MockServerInterface_PostLogin_Call {
	return &MockServerInterface_PostLogin_Call{Call: _e.mock.On("PostLogin", w, r)}
}

func (_c *MockServerInterface_PostLogin_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServerInterface_PostLogin_Call) Return() *MockServerInterface_PostLogin_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostLogin_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostLogin_Call {
	_c.Run(run)
	return _c
}

// PostProducts provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostProducts(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PostProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostProducts'
type MockServerInterface_PostProducts_Call struct {
	*mock.Call
}

// PostProducts is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServerInterface_Expecter) PostProducts(w interface{}, r interface{}) *MockServerInterface_PostProducts_Call {
	return &MockServerInterface_PostProducts_Call{Call: _e.mock.On("PostProducts", w, r)}
}

func (_c *MockServerInterface_PostProducts_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServerInterface_PostProducts_Call) Return() *MockServerInterface_PostProducts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostProducts_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostProducts_Call {
	_c.Run(run)
	return _c
}

// PostPvz provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostPvz(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PostPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPvz'
type MockServerInterface_PostPvz_Call struct {
	*mock.Call
}

// PostPvz is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServerInterface_Expecter) PostPvz(w interface{}, r interface{}) *MockServerInterface_PostPvz_Call {
	return &MockServerInterface_PostPvz_Call{Call: _e.mock.On("PostPvz", w, r)}
}

func (_c *MockServerInterface_PostPvz_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServerInterface_PostPvz_Call) Return() *MockServerInterface_PostPvz_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostPvz_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostPvz_Call {
	_c.Run(run)
	return _c
}

// PostPvzPvzIdCloseLastReception provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostPvzPvzIdCloseLastReception(w http.ResponseWriter, r *http.Request, pvzId types.UUID) {
	_mock.Called(w, r, pvzId)
	return
}

// MockServerInterface_PostPvzPvzIdCloseLastReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPvzPvzIdCloseLastReception'
type MockServerInterface_PostPvzPvzIdCloseLastReception_Call struct {
	*mock.Call
}

// PostPvzPvzIdCloseLastReception is a helper method to define mock.On call
//   - w
//   - r
//   - pvzId
func (_e *MockServerInterface_Expecter) PostPvzPvzIdCloseLastReception(w interface{}, r interface{}, pvzId interface{}) *MockServerInterface_PostPvzPvzIdCloseLastReception_Call {
	return &MockServerInterface_PostPvzPvzIdCloseLastReception_Call{Call: _e.mock.On("PostPvzPvzIdCloseLastReception", w, r, pvzId)}
}

func (_c *MockServerInterface_PostPvzPvzIdCloseLastReception_Call) Run(run func(w http.ResponseWriter, r *http.Request, pvzId types.UUID)) *MockServerInterface_PostPvzPvzIdCloseLastReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(types.UUID))
	})
	return _c
}

func (_c *MockServerInterface_PostPvzPvzIdCloseLastReception_Call) Return() *MockServerInterface_PostPvzPvzIdCloseLastReception_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostPvzPvzIdCloseLastReception_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, pvzId types.UUID)) *MockServerInterface_PostPvzPvzIdCloseLastReception_Call {
	_c.Run(run)
	return _c
}

// PostPvzPvzIdDeleteLastProduct provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostPvzPvzIdDeleteLastProduct(w http.ResponseWriter, r *http.Request, pvzId types.UUID) {
	_mock.Called(w, r, pvzId)
	return
}

// MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPvzPvzIdDeleteLastProduct'
type MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call struct {
	*mock.Call
}

// PostPvzPvzIdDeleteLastProduct is a helper method to define mock.On call
//   - w
//   - r
//   - pvzId
func (_e *MockServerInterface_Expecter) PostPvzPvzIdDeleteLastProduct(w interface{}, r interface{}, pvzId interface{}) *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	return &MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call{Call: _e.mock.On("PostPvzPvzIdDeleteLastProduct", w, r, pvzId)}
}

func (_c *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call) Run(run func(w http.ResponseWriter, r *http.Request, pvzId types.UUID)) *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(types.UUID))
	})
	return _c
}

func (_c *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call) Return() *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, pvzId types.UUID)) *MockServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	_c.Run(run)
	return _c
}

// PostReceptions provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostReceptions(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PostReceptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReceptions'
type MockServerInterface_PostReceptions_Call struct {
	*mock.Call
}

// PostReceptions is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServerInterface_Expecter) PostReceptions(w interface{}, r interface{}) *MockServerInterface_PostReceptions_Call {
	return &MockServerInterface_PostReceptions_Call{Call: _e.mock.On("PostReceptions", w, r)}
}

func (_c *MockServerInterface_PostReceptions_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostReceptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServerInterface_PostReceptions_Call) Return() *MockServerInterface_PostReceptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostReceptions_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostReceptions_Call {
	_c.Run(run)
	return _c
}

// PostRegister provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PostRegister(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PostRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRegister'
type MockServerInterface_PostRegister_Call struct {
	*mock.Call
}

// PostRegister is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServerInterface_Expecter) PostRegister(w interface{}, r interface{}) *MockServerInterface_PostRegister_Call {
	return &MockServerInterface_PostRegister_Call{Call: _e.mock.On("PostRegister", w, r)}
}

func (_c *MockServerInterface_PostRegister_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServerInterface_PostRegister_Call) Return() *MockServerInterface_PostRegister_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PostRegister_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PostRegister_Call {
	_c.Run(run)
	return _c
}

// NewMockServeMux creates a new instance of MockServeMux. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServeMux(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServeMux {
	mock := &MockServeMux{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServeMux is an autogenerated mock type for the ServeMux type
type MockServeMux struct {
	mock.Mock
}

type MockServeMux_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServeMux) EXPECT() *MockServeMux_Expecter {
	return &MockServeMux_Expecter{mock: &_m.Mock}
}

// HandleFunc provides a mock function for the type MockServeMux
func (_mock *MockServeMux) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	_mock.Called(pattern, handler)
	return
}

// MockServeMux_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type MockServeMux_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - pattern
//   - handler
func (_e *MockServeMux_Expecter) HandleFunc(pattern interface{}, handler interface{}) *MockServeMux_HandleFunc_Call {
	return &MockServeMux_HandleFunc_Call{Call: _e.mock.On("HandleFunc", pattern, handler)}
}

func (_c *MockServeMux_HandleFunc_Call) Run(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *MockServeMux_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.ResponseWriter, *http.Request)))
	})
	return _c
}

func (_c *MockServeMux_HandleFunc_Call) Return() *MockServeMux_HandleFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServeMux_HandleFunc_Call) RunAndReturn(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *MockServeMux_HandleFunc_Call {
	_c.Run(run)
	return _c
}

// ServeHTTP provides a mock function for the type MockServeMux
func (_mock *MockServeMux) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServeMux_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockServeMux_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockServeMux_Expecter) ServeHTTP(w interface{}, r interface{}) *MockServeMux_ServeHTTP_Call {
	return &MockServeMux_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, r)}
}

func (_c *MockServeMux_ServeHTTP_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServeMux_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServeMux_ServeHTTP_Call) Return() *MockServeMux_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServeMux_ServeHTTP_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServeMux_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// NewMockPostDummyLoginResponseObject creates a new instance of MockPostDummyLoginResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostDummyLoginResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostDummyLoginResponseObject {
	mock := &MockPostDummyLoginResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostDummyLoginResponseObject is an autogenerated mock type for the PostDummyLoginResponseObject type
type MockPostDummyLoginResponseObject struct {
	mock.Mock
}

type MockPostDummyLoginResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostDummyLoginResponseObject) EXPECT() *MockPostDummyLoginResponseObject_Expecter {
	return &MockPostDummyLoginResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostDummyLoginResponse provides a mock function for the type MockPostDummyLoginResponseObject
func (_mock *MockPostDummyLoginResponseObject) VisitPostDummyLoginResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostDummyLoginResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostDummyLoginResponse'
type MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call struct {
	*mock.Call
}

// VisitPostDummyLoginResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostDummyLoginResponseObject_Expecter) VisitPostDummyLoginResponse(w interface{}) *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call {
	return &MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call{Call: _e.mock.On("VisitPostDummyLoginResponse", w)}
}

func (_c *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call) Return(err error) *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostDummyLoginResponseObject_VisitPostDummyLoginResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostLoginResponseObject creates a new instance of MockPostLoginResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostLoginResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostLoginResponseObject {
	mock := &MockPostLoginResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostLoginResponseObject is an autogenerated mock type for the PostLoginResponseObject type
type MockPostLoginResponseObject struct {
	mock.Mock
}

type MockPostLoginResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostLoginResponseObject) EXPECT() *MockPostLoginResponseObject_Expecter {
	return &MockPostLoginResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostLoginResponse provides a mock function for the type MockPostLoginResponseObject
func (_mock *MockPostLoginResponseObject) VisitPostLoginResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostLoginResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostLoginResponseObject_VisitPostLoginResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostLoginResponse'
type MockPostLoginResponseObject_VisitPostLoginResponse_Call struct {
	*mock.Call
}

// VisitPostLoginResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostLoginResponseObject_Expecter) VisitPostLoginResponse(w interface{}) *MockPostLoginResponseObject_VisitPostLoginResponse_Call {
	return &MockPostLoginResponseObject_VisitPostLoginResponse_Call{Call: _e.mock.On("VisitPostLoginResponse", w)}
}

func (_c *MockPostLoginResponseObject_VisitPostLoginResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostLoginResponseObject_VisitPostLoginResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostLoginResponseObject_VisitPostLoginResponse_Call) Return(err error) *MockPostLoginResponseObject_VisitPostLoginResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostLoginResponseObject_VisitPostLoginResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostLoginResponseObject_VisitPostLoginResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostProductsResponseObject creates a new instance of MockPostProductsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostProductsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostProductsResponseObject {
	mock := &MockPostProductsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostProductsResponseObject is an autogenerated mock type for the PostProductsResponseObject type
type MockPostProductsResponseObject struct {
	mock.Mock
}

type MockPostProductsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostProductsResponseObject) EXPECT() *MockPostProductsResponseObject_Expecter {
	return &MockPostProductsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostProductsResponse provides a mock function for the type MockPostProductsResponseObject
func (_mock *MockPostProductsResponseObject) VisitPostProductsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostProductsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostProductsResponseObject_VisitPostProductsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostProductsResponse'
type MockPostProductsResponseObject_VisitPostProductsResponse_Call struct {
	*mock.Call
}

// VisitPostProductsResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostProductsResponseObject_Expecter) VisitPostProductsResponse(w interface{}) *MockPostProductsResponseObject_VisitPostProductsResponse_Call {
	return &MockPostProductsResponseObject_VisitPostProductsResponse_Call{Call: _e.mock.On("VisitPostProductsResponse", w)}
}

func (_c *MockPostProductsResponseObject_VisitPostProductsResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostProductsResponseObject_VisitPostProductsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostProductsResponseObject_VisitPostProductsResponse_Call) Return(err error) *MockPostProductsResponseObject_VisitPostProductsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostProductsResponseObject_VisitPostProductsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostProductsResponseObject_VisitPostProductsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetPvzResponseObject creates a new instance of MockGetPvzResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetPvzResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetPvzResponseObject {
	mock := &MockGetPvzResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetPvzResponseObject is an autogenerated mock type for the GetPvzResponseObject type
type MockGetPvzResponseObject struct {
	mock.Mock
}

type MockGetPvzResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetPvzResponseObject) EXPECT() *MockGetPvzResponseObject_Expecter {
	return &MockGetPvzResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetPvzResponse provides a mock function for the type MockGetPvzResponseObject
func (_mock *MockGetPvzResponseObject) VisitGetPvzResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetPvzResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetPvzResponseObject_VisitGetPvzResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetPvzResponse'
type MockGetPvzResponseObject_VisitGetPvzResponse_Call struct {
	*mock.Call
}

// VisitGetPvzResponse is a helper method to define mock.On call
//   - w
func (_e *MockGetPvzResponseObject_Expecter) VisitGetPvzResponse(w interface{}) *MockGetPvzResponseObject_VisitGetPvzResponse_Call {
	return &MockGetPvzResponseObject_VisitGetPvzResponse_Call{Call: _e.mock.On("VisitGetPvzResponse", w)}
}

func (_c *MockGetPvzResponseObject_VisitGetPvzResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetPvzResponseObject_VisitGetPvzResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockGetPvzResponseObject_VisitGetPvzResponse_Call) Return(err error) *MockGetPvzResponseObject_VisitGetPvzResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetPvzResponseObject_VisitGetPvzResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetPvzResponseObject_VisitGetPvzResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostPvzResponseObject creates a new instance of MockPostPvzResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostPvzResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostPvzResponseObject {
	mock := &MockPostPvzResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostPvzResponseObject is an autogenerated mock type for the PostPvzResponseObject type
type MockPostPvzResponseObject struct {
	mock.Mock
}

type MockPostPvzResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostPvzResponseObject) EXPECT() *MockPostPvzResponseObject_Expecter {
	return &MockPostPvzResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostPvzResponse provides a mock function for the type MockPostPvzResponseObject
func (_mock *MockPostPvzResponseObject) VisitPostPvzResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostPvzResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostPvzResponseObject_VisitPostPvzResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostPvzResponse'
type MockPostPvzResponseObject_VisitPostPvzResponse_Call struct {
	*mock.Call
}

// VisitPostPvzResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostPvzResponseObject_Expecter) VisitPostPvzResponse(w interface{}) *MockPostPvzResponseObject_VisitPostPvzResponse_Call {
	return &MockPostPvzResponseObject_VisitPostPvzResponse_Call{Call: _e.mock.On("VisitPostPvzResponse", w)}
}

func (_c *MockPostPvzResponseObject_VisitPostPvzResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostPvzResponseObject_VisitPostPvzResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostPvzResponseObject_VisitPostPvzResponse_Call) Return(err error) *MockPostPvzResponseObject_VisitPostPvzResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostPvzResponseObject_VisitPostPvzResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostPvzResponseObject_VisitPostPvzResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostPvzPvzIdCloseLastReceptionResponseObject creates a new instance of MockPostPvzPvzIdCloseLastReceptionResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostPvzPvzIdCloseLastReceptionResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostPvzPvzIdCloseLastReceptionResponseObject {
	mock := &MockPostPvzPvzIdCloseLastReceptionResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostPvzPvzIdCloseLastReceptionResponseObject is an autogenerated mock type for the PostPvzPvzIdCloseLastReceptionResponseObject type
type MockPostPvzPvzIdCloseLastReceptionResponseObject struct {
	mock.Mock
}

type MockPostPvzPvzIdCloseLastReceptionResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostPvzPvzIdCloseLastReceptionResponseObject) EXPECT() *MockPostPvzPvzIdCloseLastReceptionResponseObject_Expecter {
	return &MockPostPvzPvzIdCloseLastReceptionResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostPvzPvzIdCloseLastReceptionResponse provides a mock function for the type MockPostPvzPvzIdCloseLastReceptionResponseObject
func (_mock *MockPostPvzPvzIdCloseLastReceptionResponseObject) VisitPostPvzPvzIdCloseLastReceptionResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostPvzPvzIdCloseLastReceptionResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostPvzPvzIdCloseLastReceptionResponse'
type MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call struct {
	*mock.Call
}

// VisitPostPvzPvzIdCloseLastReceptionResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostPvzPvzIdCloseLastReceptionResponseObject_Expecter) VisitPostPvzPvzIdCloseLastReceptionResponse(w interface{}) *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call {
	return &MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call{Call: _e.mock.On("VisitPostPvzPvzIdCloseLastReceptionResponse", w)}
}

func (_c *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call) Return(err error) *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostPvzPvzIdCloseLastReceptionResponseObject_VisitPostPvzPvzIdCloseLastReceptionResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostPvzPvzIdDeleteLastProductResponseObject creates a new instance of MockPostPvzPvzIdDeleteLastProductResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostPvzPvzIdDeleteLastProductResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostPvzPvzIdDeleteLastProductResponseObject {
	mock := &MockPostPvzPvzIdDeleteLastProductResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostPvzPvzIdDeleteLastProductResponseObject is an autogenerated mock type for the PostPvzPvzIdDeleteLastProductResponseObject type
type MockPostPvzPvzIdDeleteLastProductResponseObject struct {
	mock.Mock
}

type MockPostPvzPvzIdDeleteLastProductResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostPvzPvzIdDeleteLastProductResponseObject) EXPECT() *MockPostPvzPvzIdDeleteLastProductResponseObject_Expecter {
	return &MockPostPvzPvzIdDeleteLastProductResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostPvzPvzIdDeleteLastProductResponse provides a mock function for the type MockPostPvzPvzIdDeleteLastProductResponseObject
func (_mock *MockPostPvzPvzIdDeleteLastProductResponseObject) VisitPostPvzPvzIdDeleteLastProductResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostPvzPvzIdDeleteLastProductResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostPvzPvzIdDeleteLastProductResponse'
type MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call struct {
	*mock.Call
}

// VisitPostPvzPvzIdDeleteLastProductResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostPvzPvzIdDeleteLastProductResponseObject_Expecter) VisitPostPvzPvzIdDeleteLastProductResponse(w interface{}) *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call {
	return &MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call{Call: _e.mock.On("VisitPostPvzPvzIdDeleteLastProductResponse", w)}
}

func (_c *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call) Return(err error) *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostPvzPvzIdDeleteLastProductResponseObject_VisitPostPvzPvzIdDeleteLastProductResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostReceptionsResponseObject creates a new instance of MockPostReceptionsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostReceptionsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostReceptionsResponseObject {
	mock := &MockPostReceptionsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostReceptionsResponseObject is an autogenerated mock type for the PostReceptionsResponseObject type
type MockPostReceptionsResponseObject struct {
	mock.Mock
}

type MockPostReceptionsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostReceptionsResponseObject) EXPECT() *MockPostReceptionsResponseObject_Expecter {
	return &MockPostReceptionsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostReceptionsResponse provides a mock function for the type MockPostReceptionsResponseObject
func (_mock *MockPostReceptionsResponseObject) VisitPostReceptionsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostReceptionsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostReceptionsResponse'
type MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call struct {
	*mock.Call
}

// VisitPostReceptionsResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostReceptionsResponseObject_Expecter) VisitPostReceptionsResponse(w interface{}) *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call {
	return &MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call{Call: _e.mock.On("VisitPostReceptionsResponse", w)}
}

func (_c *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call) Return(err error) *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostReceptionsResponseObject_VisitPostReceptionsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostRegisterResponseObject creates a new instance of MockPostRegisterResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRegisterResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRegisterResponseObject {
	mock := &MockPostRegisterResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRegisterResponseObject is an autogenerated mock type for the PostRegisterResponseObject type
type MockPostRegisterResponseObject struct {
	mock.Mock
}

type MockPostRegisterResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRegisterResponseObject) EXPECT() *MockPostRegisterResponseObject_Expecter {
	return &MockPostRegisterResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPostRegisterResponse provides a mock function for the type MockPostRegisterResponseObject
func (_mock *MockPostRegisterResponseObject) VisitPostRegisterResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPostRegisterResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRegisterResponseObject_VisitPostRegisterResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPostRegisterResponse'
type MockPostRegisterResponseObject_VisitPostRegisterResponse_Call struct {
	*mock.Call
}

// VisitPostRegisterResponse is a helper method to define mock.On call
//   - w
func (_e *MockPostRegisterResponseObject_Expecter) VisitPostRegisterResponse(w interface{}) *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call {
	return &MockPostRegisterResponseObject_VisitPostRegisterResponse_Call{Call: _e.mock.On("VisitPostRegisterResponse", w)}
}

func (_c *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call) Run(run func(w http.ResponseWriter)) *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call) Return(err error) *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPostRegisterResponseObject_VisitPostRegisterResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStrictServerInterface creates a new instance of MockStrictServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStrictServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStrictServerInterface {
	mock := &MockStrictServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStrictServerInterface is an autogenerated mock type for the StrictServerInterface type
type MockStrictServerInterface struct {
	mock.Mock
}

type MockStrictServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStrictServerInterface) EXPECT() *MockStrictServerInterface_Expecter {
	return &MockStrictServerInterface_Expecter{mock: &_m.Mock}
}

// GetPvz provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetPvz(ctx context.Context, request GetPvzRequestObject) (GetPvzResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPvz")
	}

	var r0 GetPvzResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetPvzRequestObject) (GetPvzResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetPvzRequestObject) GetPvzResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GetPvzResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetPvzRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPvz'
type MockStrictServerInterface_GetPvz_Call struct {
	*mock.Call
}

// GetPvz is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) GetPvz(ctx interface{}, request interface{}) *MockStrictServerInterface_GetPvz_Call {
	return &MockStrictServerInterface_GetPvz_Call{Call: _e.mock.On("GetPvz", ctx, request)}
}

func (_c *MockStrictServerInterface_GetPvz_Call) Run(run func(ctx context.Context, request GetPvzRequestObject)) *MockStrictServerInterface_GetPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetPvzRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_GetPvz_Call) Return(getPvzResponseObject GetPvzResponseObject, err error) *MockStrictServerInterface_GetPvz_Call {
	_c.Call.Return(getPvzResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetPvz_Call) RunAndReturn(run func(ctx context.Context, request GetPvzRequestObject) (GetPvzResponseObject, error)) *MockStrictServerInterface_GetPvz_Call {
	_c.Call.Return(run)
	return _c
}

// PostDummyLogin provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostDummyLogin(ctx context.Context, request PostDummyLoginRequestObject) (PostDummyLoginResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostDummyLogin")
	}

	var r0 PostDummyLoginResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostDummyLoginRequestObject) (PostDummyLoginResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostDummyLoginRequestObject) PostDummyLoginResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostDummyLoginResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostDummyLoginRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostDummyLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDummyLogin'
type MockStrictServerInterface_PostDummyLogin_Call struct {
	*mock.Call
}

// PostDummyLogin is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostDummyLogin(ctx interface{}, request interface{}) *MockStrictServerInterface_PostDummyLogin_Call {
	return &MockStrictServerInterface_PostDummyLogin_Call{Call: _e.mock.On("PostDummyLogin", ctx, request)}
}

func (_c *MockStrictServerInterface_PostDummyLogin_Call) Run(run func(ctx context.Context, request PostDummyLoginRequestObject)) *MockStrictServerInterface_PostDummyLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostDummyLoginRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostDummyLogin_Call) Return(postDummyLoginResponseObject PostDummyLoginResponseObject, err error) *MockStrictServerInterface_PostDummyLogin_Call {
	_c.Call.Return(postDummyLoginResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostDummyLogin_Call) RunAndReturn(run func(ctx context.Context, request PostDummyLoginRequestObject) (PostDummyLoginResponseObject, error)) *MockStrictServerInterface_PostDummyLogin_Call {
	_c.Call.Return(run)
	return _c
}

// PostLogin provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostLogin")
	}

	var r0 PostLoginResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostLoginRequestObject) (PostLoginResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostLoginRequestObject) PostLoginResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostLoginResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostLoginRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLogin'
type MockStrictServerInterface_PostLogin_Call struct {
	*mock.Call
}

// PostLogin is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostLogin(ctx interface{}, request interface{}) *MockStrictServerInterface_PostLogin_Call {
	return &MockStrictServerInterface_PostLogin_Call{Call: _e.mock.On("PostLogin", ctx, request)}
}

func (_c *MockStrictServerInterface_PostLogin_Call) Run(run func(ctx context.Context, request PostLoginRequestObject)) *MockStrictServerInterface_PostLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostLoginRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostLogin_Call) Return(postLoginResponseObject PostLoginResponseObject, err error) *MockStrictServerInterface_PostLogin_Call {
	_c.Call.Return(postLoginResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostLogin_Call) RunAndReturn(run func(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)) *MockStrictServerInterface_PostLogin_Call {
	_c.Call.Return(run)
	return _c
}

// PostProducts provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostProducts(ctx context.Context, request PostProductsRequestObject) (PostProductsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostProducts")
	}

	var r0 PostProductsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostProductsRequestObject) (PostProductsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostProductsRequestObject) PostProductsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostProductsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostProductsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostProducts'
type MockStrictServerInterface_PostProducts_Call struct {
	*mock.Call
}

// PostProducts is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostProducts(ctx interface{}, request interface{}) *MockStrictServerInterface_PostProducts_Call {
	return &MockStrictServerInterface_PostProducts_Call{Call: _e.mock.On("PostProducts", ctx, request)}
}

func (_c *MockStrictServerInterface_PostProducts_Call) Run(run func(ctx context.Context, request PostProductsRequestObject)) *MockStrictServerInterface_PostProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostProductsRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostProducts_Call) Return(postProductsResponseObject PostProductsResponseObject, err error) *MockStrictServerInterface_PostProducts_Call {
	_c.Call.Return(postProductsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostProducts_Call) RunAndReturn(run func(ctx context.Context, request PostProductsRequestObject) (PostProductsResponseObject, error)) *MockStrictServerInterface_PostProducts_Call {
	_c.Call.Return(run)
	return _c
}

// PostPvz provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostPvz(ctx context.Context, request PostPvzRequestObject) (PostPvzResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostPvz")
	}

	var r0 PostPvzResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostPvzRequestObject) (PostPvzResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostPvzRequestObject) PostPvzResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostPvzResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostPvzRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPvz'
type MockStrictServerInterface_PostPvz_Call struct {
	*mock.Call
}

// PostPvz is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostPvz(ctx interface{}, request interface{}) *MockStrictServerInterface_PostPvz_Call {
	return &MockStrictServerInterface_PostPvz_Call{Call: _e.mock.On("PostPvz", ctx, request)}
}

func (_c *MockStrictServerInterface_PostPvz_Call) Run(run func(ctx context.Context, request PostPvzRequestObject)) *MockStrictServerInterface_PostPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostPvzRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostPvz_Call) Return(postPvzResponseObject PostPvzResponseObject, err error) *MockStrictServerInterface_PostPvz_Call {
	_c.Call.Return(postPvzResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostPvz_Call) RunAndReturn(run func(ctx context.Context, request PostPvzRequestObject) (PostPvzResponseObject, error)) *MockStrictServerInterface_PostPvz_Call {
	_c.Call.Return(run)
	return _c
}

// PostPvzPvzIdCloseLastReception provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostPvzPvzIdCloseLastReception(ctx context.Context, request PostPvzPvzIdCloseLastReceptionRequestObject) (PostPvzPvzIdCloseLastReceptionResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostPvzPvzIdCloseLastReception")
	}

	var r0 PostPvzPvzIdCloseLastReceptionResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostPvzPvzIdCloseLastReceptionRequestObject) (PostPvzPvzIdCloseLastReceptionResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostPvzPvzIdCloseLastReceptionRequestObject) PostPvzPvzIdCloseLastReceptionResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostPvzPvzIdCloseLastReceptionResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostPvzPvzIdCloseLastReceptionRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPvzPvzIdCloseLastReception'
type MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call struct {
	*mock.Call
}

// PostPvzPvzIdCloseLastReception is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostPvzPvzIdCloseLastReception(ctx interface{}, request interface{}) *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call {
	return &MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call{Call: _e.mock.On("PostPvzPvzIdCloseLastReception", ctx, request)}
}

func (_c *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call) Run(run func(ctx context.Context, request PostPvzPvzIdCloseLastReceptionRequestObject)) *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostPvzPvzIdCloseLastReceptionRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call) Return(postPvzPvzIdCloseLastReceptionResponseObject PostPvzPvzIdCloseLastReceptionResponseObject, err error) *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call {
	_c.Call.Return(postPvzPvzIdCloseLastReceptionResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call) RunAndReturn(run func(ctx context.Context, request PostPvzPvzIdCloseLastReceptionRequestObject) (PostPvzPvzIdCloseLastReceptionResponseObject, error)) *MockStrictServerInterface_PostPvzPvzIdCloseLastReception_Call {
	_c.Call.Return(run)
	return _c
}

// PostPvzPvzIdDeleteLastProduct provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostPvzPvzIdDeleteLastProduct(ctx context.Context, request PostPvzPvzIdDeleteLastProductRequestObject) (PostPvzPvzIdDeleteLastProductResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostPvzPvzIdDeleteLastProduct")
	}

	var r0 PostPvzPvzIdDeleteLastProductResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostPvzPvzIdDeleteLastProductRequestObject) (PostPvzPvzIdDeleteLastProductResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostPvzPvzIdDeleteLastProductRequestObject) PostPvzPvzIdDeleteLastProductResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostPvzPvzIdDeleteLastProductResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostPvzPvzIdDeleteLastProductRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPvzPvzIdDeleteLastProduct'
type MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call struct {
	*mock.Call
}

// PostPvzPvzIdDeleteLastProduct is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostPvzPvzIdDeleteLastProduct(ctx interface{}, request interface{}) *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	return &MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call{Call: _e.mock.On("PostPvzPvzIdDeleteLastProduct", ctx, request)}
}

func (_c *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call) Run(run func(ctx context.Context, request PostPvzPvzIdDeleteLastProductRequestObject)) *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostPvzPvzIdDeleteLastProductRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call) Return(postPvzPvzIdDeleteLastProductResponseObject PostPvzPvzIdDeleteLastProductResponseObject, err error) *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	_c.Call.Return(postPvzPvzIdDeleteLastProductResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call) RunAndReturn(run func(ctx context.Context, request PostPvzPvzIdDeleteLastProductRequestObject) (PostPvzPvzIdDeleteLastProductResponseObject, error)) *MockStrictServerInterface_PostPvzPvzIdDeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}

// PostReceptions provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostReceptions(ctx context.Context, request PostReceptionsRequestObject) (PostReceptionsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostReceptions")
	}

	var r0 PostReceptionsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostReceptionsRequestObject) (PostReceptionsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostReceptionsRequestObject) PostReceptionsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostReceptionsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostReceptionsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostReceptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReceptions'
type MockStrictServerInterface_PostReceptions_Call struct {
	*mock.Call
}

// PostReceptions is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostReceptions(ctx interface{}, request interface{}) *MockStrictServerInterface_PostReceptions_Call {
	return &MockStrictServerInterface_PostReceptions_Call{Call: _e.mock.On("PostReceptions", ctx, request)}
}

func (_c *MockStrictServerInterface_PostReceptions_Call) Run(run func(ctx context.Context, request PostReceptionsRequestObject)) *MockStrictServerInterface_PostReceptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostReceptionsRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostReceptions_Call) Return(postReceptionsResponseObject PostReceptionsResponseObject, err error) *MockStrictServerInterface_PostReceptions_Call {
	_c.Call.Return(postReceptionsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostReceptions_Call) RunAndReturn(run func(ctx context.Context, request PostReceptionsRequestObject) (PostReceptionsResponseObject, error)) *MockStrictServerInterface_PostReceptions_Call {
	_c.Call.Return(run)
	return _c
}

// PostRegister provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PostRegister")
	}

	var r0 PostRegisterResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostRegisterRequestObject) (PostRegisterResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, PostRegisterRequestObject) PostRegisterResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PostRegisterResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, PostRegisterRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PostRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRegister'
type MockStrictServerInterface_PostRegister_Call struct {
	*mock.Call
}

// PostRegister is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockStrictServerInterface_Expecter) PostRegister(ctx interface{}, request interface{}) *MockStrictServerInterface_PostRegister_Call {
	return &MockStrictServerInterface_PostRegister_Call{Call: _e.mock.On("PostRegister", ctx, request)}
}

func (_c *MockStrictServerInterface_PostRegister_Call) Run(run func(ctx context.Context, request PostRegisterRequestObject)) *MockStrictServerInterface_PostRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PostRegisterRequestObject))
	})
	return _c
}

func (_c *MockStrictServerInterface_PostRegister_Call) Return(postRegisterResponseObject PostRegisterResponseObject, err error) *MockStrictServerInterface_PostRegister_Call {
	_c.Call.Return(postRegisterResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PostRegister_Call) RunAndReturn(run func(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)) *MockStrictServerInterface_PostRegister_Call {
	_c.Call.Return(run)
	return _c
}
